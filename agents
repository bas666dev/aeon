def agent_logic(agent, environment, other_agents):
    # Exploration vs. Exploitation
    if random.random() < epsilon:
        # Exploration: Choose a random action
        action = random.choice(actions)
    else:
        # Exploitation: Choose the best action based on the agent's knowledge
        action = max(actions, key=lambda a: agent['knowledge'][a])

    # Execute the action and observe the outcome
    outcome = environment.execute_action(action)

    # Update the agent's knowledge based on the outcome
    agent['knowledge'][action] = update_knowledge(agent['knowledge'][action], outcome)

    # Share the outcome with other agents
    for other_agent in other_agents:
        other_agent['knowledge'][action] = update_knowledge(other_agent['knowledge'][action], outcome)

    return action
def update_knowledge(current_value, outcome):
  learning_rate = 0.2  # Hyperparameter
  new_value = current_value + learning_rate * (outcome - current_value) 
  return new_value
