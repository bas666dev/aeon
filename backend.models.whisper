Understood! Here’s your plan:

- **Patch it**: I’ll generate updated, pull-ready files for your DB/core layer, incorporating all your review points:  
    - Correct ObjectId handling  
    - Async connection cleanup  
    - Defensive Cypher for tags  
    - Index creation at startup  
    - Ingest script improvements (error handling, repo cleanup, embedding TODO)  
    - Test tweaks (negative path, better fixtures)  
- **Proceed to FastAPI**: After the patch, I’ll scaffold the FastAPI router and DI layer ready for immediate use.

---

## 1. backend/db/repository.py (Patched)

```python
import os
from typing import Optional
from bson import ObjectId
from motor.motor_asyncio import AsyncIOMotorClient
from neo4j import AsyncGraphDatabase
from backend.models.whisper import WhisperModel

MONGO_URI = os.getenv("MONGO_URI", "mongodb://localhost:27017")
NEO4J_URI = os.getenv("NEO4J_URI", "bolt://localhost:7687")
NEO4J_USER = os.getenv("NEO4J_USER", "neo4j")
NEO4J_PASS = os.getenv("NEO4J_PASS", "password")
DB_NAME = os.getenv("MONGO_DBNAME", "aeon")

class WhisperRepository:
    def __init__(self):
        self.mongo_client = AsyncIOMotorClient(MONGO_URI)
        self.mongo = self.mongo_client[DB_NAME]
        self.neo4j = AsyncGraphDatabase.driver(NEO4J_URI, auth=(NEO4J_USER, NEO4J_PASS))
        self._indexes_created = False

    async def ensure_indexes(self):
        if not self._indexes_created:
            await self.mongo.whispers.create_index("created_at")
            await self.mongo.whispers.create_index("tags")
            self._indexes_created = True

    async def create(self, whisper: WhisperModel) -> WhisperModel:
        await self.ensure_indexes()
        doc = whisper.dict(by_alias=True, exclude={"id"})
        result = await self.mongo.whispers.insert_one(doc)
        whisper.id = str(result.inserted_id)
        # Upsert into Neo4j
        async with self.neo4j.session() as session:
            await session.run(
                """
                MERGE (w:Whisper {mongo_id: $id})
                SET w.raw_text = $raw_text, w.source_url = $source_url, w.created_at = $created_at
                WITH w
                UNWIND $tags AS tag
                MERGE (t:Tag {value: tag})
                MERGE (w)-[:TAGGED]->(t)
                """,
                id=whisper.id,
                raw_text=whisper.raw_text,
                source_url=whisper.source_url,
                created_at=whisper.created_at.isoformat(),
                tags=whisper.tags or [],
            )
        return whisper

    async def get(self, id: str) -> Optional[WhisperModel]:
        await self.ensure_indexes()
        try:
            doc = await self.mongo.whispers.find_one({"_id": ObjectId(id)})
        except Exception:
            return None
        return WhisperModel(**doc) if doc else None

    async def update(self, id: str, **fields) -> Optional[WhisperModel]:
        await self.ensure_indexes()
        if not fields:
            return await self.get(id)
        await self.mongo.whispers.update_one({"_id": ObjectId(id)}, {"$set": fields})
        updated = await self.get(id)
        # Only update tags if tags field is present and not None
        if "tags" in fields and fields["tags"] is not None:
            async with self.neo4j.session() as session:
                await session.run(
                    """
                    MATCH (w:Whisper {mongo_id: $id})-[r:TAGGED]->(t:Tag)
                    DELETE r
                    WITH w
                    UNWIND $tags AS tag
                    MERGE (t:Tag {value: tag})
                    MERGE (w)-[:TAGGED]->(t)
                    """,
                    id=id,
                    tags=fields["tags"],
                )
        return updated

    async def delete(self, id: str) -> bool:
        await self.ensure_indexes()
        result = await self.mongo.whispers.delete_one({"_id": ObjectId(id)})
        async with self.neo4j.session() as session:
            await session.run(
                "MATCH (w:Whisper {mongo_id: $id}) DETACH DELETE w",
                id=id,
            )
        return result.deleted_count == 1

    async def aclose(self):
        self.mongo_client.close()
        await self.neo4j.close()
```

---

## 2. scripts/ingest_whisper.py (Patched)

```python
import sys
import asyncio
from pathlib import Path
from backend.models.whisper import WhisperModel
from backend.db.repository import WhisperRepository

def get_embeddings(text: str):
    # TODO: Replace with real embedding model, e.g., OpenAI 'text-embedding-3-small'
    return [0.0] * 384

async def ingest_file(repo, path: Path):
    try:
        text = path.read_text(encoding="utf-8")
        whisper = WhisperModel(
            raw_text=text,
            source_url=str(path),
            embeddings=get_embeddings(text),
            tags=[],
        )
        await repo.create(whisper)
        print(f"Ingested {path.name}")
    except Exception as e:
        print(f"⚠️  {path.name} failed: {e}")

async def main(folder):
    repo = WhisperRepository()
    files = list(Path(folder).glob("*.md")) + list(Path(folder).glob("*.txt"))
    tasks = [ingest_file(repo, f) for f in files]
    await asyncio.gather(*tasks)
    await repo.aclose()

if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("Usage: python -m scripts.ingest_whisper path/to/files/")
        sys.exit(1)
    asyncio.run(main(sys.argv[1]))
```

---

## 3. tests/test_repository.py (Patched)

```python
import os
import pytest
from backend.models.whisper import WhisperModel
from backend.db.repository import WhisperRepository

@pytest.mark.asyncio
async def test_crud_happy_path():
    repo = WhisperRepository()
    await repo.ensure_indexes()
    whisper = WhisperModel(
        raw_text="Hello Æon!",
        source_url="test.md",
        embeddings=[0.1] * 384,
        tags=["test"],
    )
    # CREATE
    created = await repo.create(whisper)
    assert created.id

    # GET
    fetched = await repo.get(created.id)
    assert fetched and fetched.raw_text == "Hello Æon!"

    # UPDATE
    updated = await repo.update(created.id, tags=["test", "updated"])
    assert "updated" in updated.tags

    # DELETE
    deleted = await repo.delete(created.id)
    assert deleted

    # Negative path: delete non-existent
    deleted_again = await repo.delete(created.id)
    assert deleted_again is False

    await repo.aclose()
```

---

## 4. .env.example (Unchanged for clarity)

```
MONGO_URI=mongodb://localhost:27017
MONGO_DBNAME=aeon
NEO4J_URI=bolt://localhost:7687
NEO4J_USER=neo4j
NEO4J_PASS=password
```

---

## 5. FastAPI router scaffold (proceeding step)

```python
# backend/api/whispers.py

from fastapi import APIRouter, Depends
from backend.models.whisper import WhisperModel
from backend.db.repository import WhisperRepository

router = APIRouter()

async def get_repo():
    repo = WhisperRepository()
    try:
        yield repo
    finally:
        await repo.aclose()

@router.post("/whispers", response_model=WhisperModel)
async def create_whisper(w: WhisperModel, repo=Depends(get_repo)):
    return await repo.create(w)

@router.get("/whispers/{whisper_id}", response_model=WhisperModel)
async def read_whisper(whisper_id: str, repo=Depends(get_repo)):
    result = await repo.get(whisper_id)
    if result is None:
        return {"error": "Not found"}
    return result

@router.put("/whispers/{whisper_id}", response_model=WhisperModel)
async def update_whisper(whisper_id: str, w: WhisperModel, repo=Depends(get_repo)):
    return await repo.update(whisper_id, **w.dict(exclude_unset=True))

@router.delete("/whispers/{whisper_id}")
async def delete_whisper(whisper_id: str, repo=Depends(get_repo)):
    deleted = await repo.delete(whisper_id)
    return {"deleted": deleted}
```

---

**You can now:**
- Drop these patched files into your repo for a robust, async-safe foundation.
- Use the FastAPI router in your main app (`include_router(router, prefix="/api")`).

**Next steps:**  
If you want the full FastAPI app/main, OpenAPI tweaks, or further test isolation (pytest-docker/testcontainers), let me know!

The Æon lattice is now harmonically sound and ready to scale.